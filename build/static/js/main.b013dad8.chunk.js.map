{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","IndividualComic","params","useParams","currentComicId","parseInt","comicId","id","src","alt","to","App","path","href","class","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,mICK3C,SAASC,IACP,IAAMC,EAASC,cACTC,EAAiBC,SAASH,EAAOI,QAAS,IAEhD,OACE,iCACE,yBACEC,GAAG,QACHC,IAAG,uBAAkBJ,EAAlB,QACHK,IAAI,iBAEN,6BACE,kBAAC,IAAD,CAAMC,GAAE,YAAR,aACCN,EAAiB,GAChB,kBAAC,IAAD,CAAMM,GAAE,iBAAYN,EAAiB,EAA7B,SAAR,QAEDA,EAbY,IAcX,kBAAC,IAAD,CAAMM,GAAE,iBAAYN,EAAiB,EAA7B,SAAR,QAEDA,EAhBY,IAiBX,kBAAC,IAAD,CAAMM,GAAE,iBAjBG,GAiBH,SAAR,iBAwEKC,MAjEf,WACE,OACE,kBAAC,WAAD,KACE,kBAAC,IAAD,KACE,gCACE,8CAEF,6BACE,kBAAC,IAAD,CAAOC,KAAK,mBACV,kBAACX,EAAD,QAuBJ,gCACE,4BACE,4BACE,uBAAGY,KAAK,IACN,yBACEC,MAAM,OACNN,IAAI,qBACJC,IAAI,qBAIV,4BACE,uBAAGI,KAAK,IACN,yBAAKC,MAAM,OAAON,IAAI,mBAAmBC,IAAI,mBAGjD,4BACE,uBAAGI,KAAK,IACN,yBAAKC,MAAM,OAAON,IAAI,oBAAoBC,IAAI,oBAGlD,4BACE,uBAAGI,KAAK,gDACN,yBAAKC,MAAM,OAAON,IAAI,kBAAkBC,IAAI,uBC3ExCM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b013dad8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Fragment } from \"react\";\nimport { BrowserRouter, Route, useParams, Link } from \"react-router-dom\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction IndividualComic() {\n  const params = useParams();\n  const currentComicId = parseInt(params.comicId, 10);\n  const MAX_IMAGES = 28;\n  return (\n    <section>\n      <img\n        id=\"comic\"\n        src={`/comics/comic${currentComicId}.png`}\n        alt=\"So It Begins\"\n      />\n      <div>\n        <Link to={`/comic/1`}>Beggining</Link>\n        {currentComicId > 1 && (\n          <Link to={`/comic/${currentComicId - 1}.png`}>Back</Link>\n        )}\n        {currentComicId < MAX_IMAGES && (\n          <Link to={`/comic/${currentComicId + 1}.png`}>Next</Link>\n        )}\n        {currentComicId < MAX_IMAGES && (\n          <Link to={`/comic/${MAX_IMAGES}.png`}>Most recent</Link>\n        )}\n      </div>\n    </section>\n  );\n}\n\nfunction App() {\n  return (\n    <Fragment>\n      <BrowserRouter>\n        <header>\n          <h1>Startup Comic</h1>\n        </header>\n        <nav>\n          <Route path=\"/comic/:comicId\">\n            <IndividualComic />\n          </Route>\n          {/* <ul>\n          <li>\n            <button id=\"first\" name=\"first\">\n              {\" \"}\n              <img src=\"dist/first.png\" alt=\"first\" class=\"button-img\" />\n            </button>\n          </li>\n          <li>\n            <button id=\"back\" name=\"back\">\n              {\" \"}\n              <img src=\"dist/back.png\" alt=\"back\" class=\"button-img\" />\n            </button>\n          </li>\n          <li>\n            <button id=\"next\" name=\"next\">\n              {\" \"}\n              <img src=\"dist/next.png\" alt=\"next\" class=\"button-img\" />\n            </button>\n          </li>\n        </ul> */}\n        </nav>\n        <footer>\n          <ul>\n            <li>\n              <a href=\"\">\n                <img\n                  class=\"icon\"\n                  src=\"dist/instagram.svg\"\n                  alt=\"instagram-icon\"\n                />\n              </a>\n            </li>\n            <li>\n              <a href=\"\">\n                <img class=\"icon\" src=\"dist/twitter.svg\" alt=\"twitter-icon\" />\n              </a>\n            </li>\n            <li>\n              <a href=\"\">\n                <img class=\"icon\" src=\"dist/facebook.svg\" alt=\"facebook-icon\" />\n              </a>\n            </li>\n            <li>\n              <a href=\"https://www.reddit.com/user/unicorndroppingz\">\n                <img class=\"icon\" src=\"dist/reddit.svg\" alt=\"reddit-icon\" />\n              </a>\n            </li>\n          </ul>\n        </footer>\n      </BrowserRouter>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}